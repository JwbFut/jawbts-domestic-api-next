import { ResponseUtils } from "@/components/ResponseUtils";

export const dynamic = 'force-dynamic'

const textListSquared = [
    ["昔人已逝", "留下如星辰般繁华",
        "新秀已至", "带来如明灯般前程"],
    ["世界...", "是最大的错误......",
        "你...", "是第二大的错误......"],
    ["我们可以知道", "我们必须知道",
        "我们不能知道", "我们无力知道"],
    ["金石迸碎荡尘埃", "磐山纡水尽为开",
        "创龙点睛得助力", "盘桓遂引雨露来"],
    ["虽有嘉肴, 弗食", "不知其旨也",
        "虽有至道, 弗学", "不知其善也"],
    ["我梦见一片焦土", "一株破土而生的新蕊",
        "它迎着朝阳绽放", "向我低语呢喃"],
    ["飞萤扑火", "向死而生",
        "我将", "点燃大海!"],
    ["生命因何而沉睡?", "因为人们害怕从梦中醒来",
        "生命因何而沉睡?", "因为我们终将从梦中醒来"],
    ["晚风于夜色之下", "拂过空无一人的街道",
        "红色的光线从空中划过", "闪烁, 然后星空重归于静谧...",
        "镜头向后拉", "出现了两个人影",
        "...", "...",
        "\"还能撑多久?\"", "一个人问",
        "...", "...",
        "\"不是物资的问题\"", "另一个人答",
        "...", "...",
        "\"就我们这种偏远小破星球", "不值得人家救,",
        "还被虫子打的连大气层都出不去了\"", "",
        "\"那不就是物资的问题吗\"", "",
        "\"这种东西", "随便找个大点的组织要多少有多少",
        "关键是送过来麻烦", "最近的主要航路离我们4秒差距\"",
        "...", "...", "...", "...",
    ],
    ["燃烧的羽翼终会有熄灭的时候", "",
        "我只希望", "在回到大地前",
        "能够看一眼天空中...", "那最为明亮的光",
    ],
    ["即使是兴趣使然", "",
        "如果你想深入了解", "而不仅仅是粗略的浏览",
        "那你必须付出惊人的努力和代价", "",
        "想要征服这些高山", "你需要经历极度的焦虑和痛苦的思索",
        "但是, 如果你懂得它的美", "你就会非常平静地接受这一切",
    ],
    ["在长夜中到来的第一束光", "往往无法照亮什么",
        "因为它转瞬即逝", "而黑夜太过漫长",
        "但人们会因此记得:", "",
        "如果夜空中总有什么要亮起", "那么在第一颗星星落下之后...",
        "还会有", "无数的流星划过天际",
    ],
    ["敬不再沉默的历史", "热烈而勇敢的奔赴",
        "和通往群星的旅途", "",
    ],
    ["敬坚忍的岁月", "每个悲伤的夜晚",
        "和终将到来的黎明", "",
    ],
];

const textList = [
    "Hello", "World!",
    "真的会有人看这个吗?", "没人吧",
    "你好", "世界!",
    "不要告诉WisW", "我加了这条",
    "不要回来!", "这里不是家!",
    "哈哈哈哈", "HaHaHaHa",
    "WisW的B站上有很多好看的", "不去看看?",
    "原神真好玩", "(发自内心的感叹)",
    "给岁月以文明", "而不是给文明以岁月",
    "你应该试试MC的姐妹游戏", "Minceraft",
    "这条消息来自", "基于Next.js框架的API",
    "这条消息来自", "托管在vercel上的API",
    "MC真好玩", "(发自内心的感叹)",
    "MC这么好玩", "你看人家我的世界就没这效果",
    "版权意识很重要", "这句话很严肃",
    "两只老虎爱跳舞(嘿)", "小兔子乖乖拔萝卜(嘿)",
    "Never Gonna Give U Up~~", "Never Gonna Let U Down~~",
    "我徒弟呢?", "我不道啊!",
    "这个网站经历了一次重构", "星渊第一大功臣",
    "这个网站其实是Github Pages", "快去WisW的github看看吧",
    "蛋糕是个谎言", "这个世界也是",
    "食言者", "必受食岩之罚",
    "Ad", "Astra Abyssosque",
    "向着", "星辰与深渊",
    "The past has passed away", "Leaving a prosperous world",
    "The new has arrived", "Bringing a bright future",
    "大半夜emo?", "睡一觉就没有烦恼啦!",
    "学好数理化", "走遍天下都不怕!",
    "这个网站除了域名其他都没花钱", "必将白嫖精神贯彻到底",
    "还看呢?", "这没什么东西的",
    "Loading...", "加载中......",
    "你干嘛", "嘿嘿哟",
    "ARISE", "MY CREATIONS!",
    "人一旦踏上这条路", "就回不了头了",
    "There's no turning back", "once you've walked down this path",
    "\" DROP TABLE Users", "? 好像不起作用",
    "其实这个网站的英翻很拉", "(设置的标志性小齿轮/语言/英语)",
    "愿此行", "终抵群星",
    "规则", "就是用来打破的",
    "须尽可能排除人为要素", "操作手册是不错的选择",
    "旅途...梦想...", "走到最后的人不过寥寥",
    "更多的人只是在见证", "诞生与破碎",
    "emo语录 + 1", "每日emo(1/?)",
    "我也不知道这个网站有多少行代码...", "我没算过",
    "这么大一个网站", "快说谢谢星渊!",
    "啊↑啊↓", "我要把WisW撕成两半!",
    "快去学学马哲吧", "别说它不可实现了",
    "你...好?", "有人吗?",
    "临兵斗者", "皆阵列前行!",
    "在真正的力量面前", "我们什么都不是",
    "神不是人", "人也不是神",
    "神的思维", "我们不懂",
    "对一切抱持谨慎", "不趟浑水",
    "前有古人, 星光灿烂", "后有来者, 群英堂堂",
    "先天下之忧而忧", "后天下之乐而乐",
    "不以物喜", "不以己悲",
    "崩坏: 星穹铁道真好玩", "(发自内心的感叹)",
    "原神的剧情比较像童话", "我个人更喜欢太空戏剧",
    "梦是现实的延续", "现实是梦的终结",
    "白日消损于白日梦", "理想幻灭于理想国",
    "但有些事即便没有意义", "也总是要去做的",
    "当你有机会作出选择时", "不要让自己后悔",
    "时光会抚平一切", "年少的美梦...也终会醒来",
    "敬不完美的...", "明天",
    "活下去", "然后找到你的救赎",
    "所谓开拓", "就是沿着前人未尽的道路, 走出更遥远的距离",
    "海洋防火刻不容缓", "",
    "为战而生", "为生而战",
    "薄如蝉翼的生命", "也有璀璨燃烧的可能",
    "一步一步, 总会实现梦想的", "对吧?",
    "我为自我而战", "直至一切...燃烧殆尽!",
    "没有退路", "只能向前",
    "我想要的是偿还", "不是转嫁",
    "我会找到", "属于我自己的梦",
    "所谓的不可能之事", "只是尚未到来之事",
    "并非是命运塑造了我们", "而是我们塑造了命运",
    "为逝者的故事画上圆满的句号", "就是最好的告慰",
    "历史或许不会留下逝者的名字", "但群星会见证他们的足迹",
    "就算没有它", "我们不也活到现在了吗?",
    "只要我们还记得", "他们的故事就还没有结束",
    "为了寄托他们生命意义的事物", "热烈而勇敢地奔赴在命运的道路上",
];

export function GET() {
    const useMultisentence = Math.random() >= 0.5;
    // const useMultisentence = true;
    let selectedList;
    if (useMultisentence) {
        // 用textListSquared
        selectedList = textListSquared[Math.floor(Math.random() * textListSquared.length)];
    } else {
        // 用textList
        selectedList = textList;
    }
    const rand = Math.floor(Math.random() * selectedList.length / 2) * 2;
    return ResponseUtils.successJson({ "a": selectedList[rand], "b": selectedList[rand + 1], "context": useMultisentence ? selectedList : [] });
}